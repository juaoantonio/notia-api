// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ===================== ENUMS =====================

enum EventType {
  CLICK
  VISIT
  SHARE
  CREATE
}

enum TagSource {
  MANUAL // manual
  AI // ai
}

// ===================== MODELS =====================

model User {
  id            String   @id @default(uuid()) @db.Uuid
  googleSub     String   @unique
  email         String?  @unique
  emailVerified Boolean  @default(false)
  name          String?
  picture       String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  folders Folder[]
  events  Event[]
}

model Folder {
  id          String   @id @default(uuid()) @db.Uuid
  ownerId     String   @db.Uuid
  name        String
  description String
  isPublic    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  owner      User        @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  links      Link[]
  events     Event[]
  // one-to-one optional relation (a folder may have a public slug)
  publicSlug PublicSlug?

  @@index([ownerId])
}

model Link {
  id          String   @id @default(uuid()) @db.Uuid
  folderId    String   @db.Uuid
  url         String
  title       String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  folder Folder    @relation(fields: [folderId], references: [id], onDelete: Cascade)
  tags   LinkTag[]
  events Event[]

  @@index([folderId])
}

model Tag {
  id        String   @id @default(uuid()) @db.Uuid
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  links LinkTag[]
}

// Explicit many-to-many join table to store extra metadata (source)
model LinkTag {
  linkId String    @db.Uuid
  tagId  String    @db.Uuid
  source TagSource

  // Relations
  link Link @relation(fields: [linkId], references: [id], onDelete: Cascade)
  tag  Tag  @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([linkId, tagId])
}

model PublicSlug {
  id        String    @id @default(uuid()) @db.Uuid
  folderId  String    @unique @db.Uuid
  slug      String    @unique
  active    Boolean   @default(true)
  createdAt DateTime  @default(now())
  revokedAt DateTime?

  // Relations
  folder Folder @relation(fields: [folderId], references: [id], onDelete: Cascade)
}

model Event {
  id         BigInt    @id @default(autoincrement())
  userId     String?   @db.Uuid
  folderId   String?   @db.Uuid
  linkId     String?   @db.Uuid
  eventType  EventType
  meta       Json
  occurredAt DateTime  @db.Timestamptz(6)

  // Relations
  user   User?   @relation(fields: [userId], references: [id], onDelete: SetNull)
  folder Folder? @relation(fields: [folderId], references: [id], onDelete: SetNull)
  link   Link?   @relation(fields: [linkId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([folderId])
  @@index([linkId])
}
