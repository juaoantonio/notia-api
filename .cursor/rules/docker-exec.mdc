---
alwaysApply: false
---
## Execução de comandos somente via Docker

- Sempre execute QUALQUER comando dentro de um container Docker efêmero do projeto. Nunca rode na máquina host.
- Use um container descartável por execução (`--rm`). Para sequências de passos, encadeie no mesmo `docker run` usando `&&`.
- Conectividade com o Postgres local do Compose é feita via `--network host` (Linux/WSL2) para acessar `127.0.0.1:5432` exposto pelo serviço `db` do [docker-compose.yaml](mdc:docker-compose.yaml).
- Monte o diretório do repositório como volume de trabalho e preserve o usuário do host para evitar problemas de permissão.
- Carregue variáveis de ambiente do arquivo de desenvolvimento, quando existir: `envs/.env.development`.

### Imagem base sugerida

- Projeto usa Fastify + TypeScript + Zod + Prisma. Utilize a imagem oficial do Node com ferramentas comuns de build:
  - `node:20-bookworm`

Se houver um `Dockerfile` específico no repositório, prefira construir e usar a imagem local `notia-dev`:

```
docker build -t notia-dev .
```

e substitua `node:20-bookworm` por `notia-dev` nos exemplos abaixo.

### Wrapper canônico para qualquer comando

Substitua `<COMANDO_AQUI>` pelo comando que você executaria na máquina local. Use aspas simples externas e `bash -lc` para preservar pipelines e variáveis.

```
docker run --rm \
  -u $(id -u):$(id -g) \
  -v /home/juao/projects/notia/notia-api:/workspace \
  -w /workspace \
  --env-file envs/.env.development \
  --network host \
  --name notia-api-cmd-$(date +%s) \
  node:20-bookworm \
  bash -lc '<COMANDO_AQUI>'
```

Notas:
- Se `envs/.env.development` não existir, remova a flag `--env-file`.
- Para múltiplas etapas, encadeie: `bash -lc 'step1 && step2 && step3'`.
- Para jobs longos (servidor dev), a remoção acontece quando o processo encerra; ainda use `--rm`.

### Exemplos rápidos

- Instalar dependências: `docker run ... bash -lc 'corepack enable && pnpm i || npm ci'`
- Migrar banco: `docker run ... bash -lc 'npx prisma migrate deploy'`
- Rodar testes: `docker run ... bash -lc 'npm test -- --run'`

### Política de remoção do container

- Sempre utilizar `--rm` para que o container seja removido automaticamente ao término da execução.
- Não iniciar shells interativos persistentes; preferir comandos únicos encadeados.

### Observações

- O banco de dados é orquestrado pelo Compose e exposto localmente pelo serviço `db` em [docker-compose.yaml](mdc:docker-compose.yaml). Garanta que o serviço `db` esteja ativo antes de comandos que dependem de Postgres.
- Para desempenho, você pode opcionalmente usar volumes nomeados (ex.: `-v notia_node_modules:/workspace/node_modules`), porém eles não são removidos automaticamente. O container, entretanto, deve ser sempre efêmero.

